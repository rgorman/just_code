p <- 29.46
i <- 24.57
r <- 250
r - (p+1)
250-54.03
195.97 + 25.23
62*31
172/15
30+420
372+72
315+121
172+220+50
a <- 15
b <- 16
c <- 15
d <- 15
a * 12
a * 15
b * 20
b * 8
c * 25
c * 5
d * 2
d * 28
16*15
15*17
15*19
seq(1:150)
f <- seq(1:150)
length(f)
b * 20
mast <- 15*17
march <- 15*2
seq(301, 546)
length(seq(301, 546))
a * 12
a <- 15
b <- 16
c <- 15
d <- 15
a * 12
card <-  seq(1101, 1172)
card <-  seq(1001, 1172)
length(card)
card <-  seq(2001, 2219)
length(card)
54.03-250
195.97+31.43
7/16
14/16
12/16
10/16
5/16
9/16
19/23
20/22
19/21
12/19
15/19
20/21
18/21
17/19
18/22
21/23
18/22
15/17
17/21
18/22
14/15
11/14
12/14
13/15
10/14
20/23
11/14
12/15
14/15
12/14
11/14
11/14
17/23
10/14
19*60
17*60
60*9
1.309 * 200
3*1.5
p <- 32.1
i <- 21.93
p + i
250- (p+i)
195.97 + p
print(timestamp())
##------ Sun Apr 09 10:31:18 2017 ------##
demo()
96/6
360/90
121/11
52/6
52*6
6*8
52 %% 6
x <- -5:5
x_sq <- x^2
ex_sq <- exp(x)
sum_ex_sq <- sum(ex_sq)
sum_x_sq <- sum(x_sq)
s_sq / sum_x_sq
x_sq / sum_x_sq
rm(list = ls())
z <- c(1,2,3,4,5,1,2)
z_exp <- exp(z)
z_sq <- z^2
z_exp_sum <- sum(z_exp)
z_sq_sum <- sum(z_sq)
z_exp / z_exp_sum
z_sq / z_sq_sum
sum(z_sq / z_sq_sum)
z <- c(10,20,30,40,50,10,20)
z_exp <- exp(z)
z_sq <- z^2
z_exp_sum <- sum(z_exp)
z_sq_sum <- sum(z_sq)
z_exp / z_exp_sum
z_sq / z_sq_sum
9.999546e-01 / 4.539787e-05
exp(40)
exp(50)
log(z_exp)
.9^7
.9^3
a <- neighborhood.l[[as.numeric(x["id"]]]
a <- paste0(a, sep="", collapse = " ")
} else {
a <- NA
}
} else {
a <- NA
}
return(a)
}
neighborhood_extraction <- function(x) {
if (as.numeric(x["id"]) <= length(neighborhood.l) & node.list$Subtree_eligibility[[as.numeric(x["id"])]] == TRUE) {
a <- "poop"
} else {
a <- "piss"
}
return(a)
}
sapply(sent_working, neighborhood_extraction)
if (node.list$Subtree_eligibility[[as.numeric(x["id"])]] == TRUE) {
a <- neighborhood.l[[as.numeric(x["id"])]]
} else {
a <- "poop"
}
)
View(neighborhood_extraction)
a <- neighborhood.l[[as.numeric(x["id"]]]
a <- paste0(a, sep="", collapse = " ")
} else {
a <- NA
}
} else {
a <- NA
}
return(a)
}
neighborhood_extraction <- function(x) {
if (as.numeric(x["id"]) <= length(neighborhood.l) & node.list$Subtree_eligibility[[as.numeric(x["id"])]] == TRUE) {
a <- "poop"
} else {
a <- "piss"
}
return(a)
}
sapply(sent_working, neighborhood_extraction)
if (node.list$Subtree_eligibility[[as.numeric(x["id"])]] == TRUE) {
a <- neighborhood.l[[as.numeric(x["id"])]]
} else {
a <- "poop"
}
)
choose(4, 2)
choose(4, 3)
install.packages("MASS")
require(MASS)
fractions(.2)
install.packages("FRACTION")
require(FRACTION)
y=c(1/2,1/3,1/9)
fra.m(y)
fractions(1/2)
fractions(1/2 * 1/2)
detach(FRACTION)
detach("FRACTION")
requi(XML)
require(XML)
require(igraph)
require(arcdiagram)
a <- paste('<?xml version="1.0" encoding="UTF-8"?>', '<sentence id="1" document_id="" subdoc="" span="">
<word id="1" form="Marcus" lemma="Marcus" postag="n-s---mn-" relation="SBJ" head="3"/>
<word id="2" form="Liviam" lemma="Livia" postag="n-s---fa-" relation="OBJ" head="3"/>
<word id="3" form="amat" lemma="amo" postag="v3spia---" relation="PRED" head="0"/>
<word id="4" form="." lemma="punc1" postag="u--------" relation="AuxK" head="0"/>
</sentence>' )
a
doc <- xmlTreeParse(a)
top <- xmlRoot(doc)
b <- xmlSApply(top, function(x) xmlGetAttr(x, "id"))
c <- xmlSApply(top, function(x) xmlGetAttr(x, "head"))
b <- as.numeric(b)
c <- as.numeric(c)
edge.matrix <- matrix(b, ncol=1)
edge.matrix <- cbind(edge.matrix, c)
index <- which(edge.matrix[, 2] > 0)
short.edge.matrix <- edge.matrix[index, ]
arcplot(short.edge.matrix, las = 1, sorted = TRUE, lwd.arcs = 7 )
plot.igraph(graph.object)
graph.object <- graph_from_edgelist(short.edge.matrix)
plot.igraph(graph.object)
E(graph.object)
length(E(graph.object))
a <- paste('<?xml version="1.0" encoding="UTF-8"?>', '<sentence id="2" document_id="" subdoc="" span="">
<word id="1" form="qui" lemma="qui2" postag="p-p---mn-" relation="SBJ" head="3"/>
<word id="2" form="tamen" lemma="tamen" postag="d--------" relation="AuxY" head="3"/>
<word id="3" form="haberent" lemma="habeo" postag="v3pisa---" relation="PRED" head="0"/>
<word id="4" form="ius" lemma="jus" postag="n-s---na-" relation="OBJ" head="3"/>
<word id="5" form="suum" lemma="suus" postag="a-s---na-" relation="ATR" head="4"/>
<word id="6" form="disputandi" lemma="disputo" postag="v_s_da-g-" relation="ATR" head="4"/>
<word id="7" form="de" lemma="de" postag="r--------" relation="AuxP" head="6"/>
<word id="8" form="officio" lemma="officium" postag="n-s---nb-" relation="OBJ" head="7"/>
<word id="9" form="," lemma="punc1" postag="u--------" relation="AuxX" head="0"/>
<word id="10" form="si" lemma="si" postag="c--------" relation="AuxC" head="3"/>
<word id="11" form="rerum" lemma="res" postag="n-p---fg-" relation="ATR" head="13"/>
<word id="12" form="aliquem" lemma="aliqui" postag="a-s---ma_" relation="ATR" head="13"/>
<word id="13" form="dilectum" lemma="delectus2" postag="n-s---ma-" relation="OBJ" head="14"/>
<word id="14" form="reliquissent" lemma="relinquo" postag="v3plsa---" relation="ADV" head="10"/>
<word id="15" form="," lemma="punc1" postag="u--------" relation="AuxX" head="0"/>
<word id="16" form="ut" lemma="ut" postag="c--------" relation="AuxC" head="14"/>
<word id="17" form="ad" lemma="ad" postag="r--------" relation="AuxP" head="20"/>
<word id="18" form="officii" lemma="officium" postag="n-s---ng-" relation="ATR" head="19"/>
<word id="19" form="inventionem" lemma="inventio" postag="n-s---fa-" relation="ATR" head="17"/>
<word id="20" form="aditus" lemma="aditus2" postag="n-s---mn-" relation="SBJ" head="21"/>
<word id="21" form="esset" lemma="sum1" postag="v3sisa---" relation="ADV" head="16"/>
<word id="22" form="." lemma="punc1" postag="u--------" relation="AuxK" head="0"/>
</sentence>' )
a
doc <- xmlTreeParse(a)
top <- xmlRoot(doc)
b <- xmlSApply(top, function(x) xmlGetAttr(x, "id"))
c <- xmlSApply(top, function(x) xmlGetAttr(x, "head"))
b <- as.numeric(b)
c <- as.numeric(c)
edge.matrix <- matrix(b, ncol=1)
edge.matrix <- cbind(edge.matrix, c)
index <- which(edge.matrix[, 2] > 0)
short.edge.matrix <- edge.matrix[index, ]
arcplot(short.edge.matrix, las = 1, sorted = TRUE, lwd.arcs = 7 )
graph.object <- graph_from_edgelist(short.edge.matrix)
plot.igraph(graph.object)
V(graph.object)
length(E(graph.object))
length(E(graph.object))
vertex_count <- length(E(graph.object)) + 1
degree(graph.object)
degree(graph.object)^2
sum(degree(graph.object)^2)
degree_sum <-  sum(degree(graph.object)^2)
degree_sum
degree_sum / vertex_count
fractions(1/2)
fractions(degree_sum / vertex_count)
k2 <- fractions(degree_sum / vertex_count)
fractions(vertex_count)
fractions(vertex_count - k2)
fractions( k2)
k2
E(graph.object) - k2
E(graph.object) - k2
18*19
k2
342-82
length(k2)
str(k2)
18-4.32
fractions(4.32)
fractions(13.68)
fra.m(13.68)
E(graph.object) - k2
x <- E(graph.object) - k2
x
x[18]
x[length[x]]
x[length(x)]
(19/2) * x[length(x)]
degree_sum / vertex_count
E(graph.object) - degree_sum / vertex_count
E(graph.object) - (degree_sum / vertex_count)
length(E(graph.object)) - (degree_sum / vertex_count)
length(E(graph.object)) - (degree_sum / vertex_count)
13.684*19
(19/2)  * (length(E(graph.object)) - (degree_sum / vertex_count))
(vertex_count/2)  * (length(E(graph.object)) - (degree_sum / vertex_count))
a <- paste('<?xml version="1.0" encoding="UTF-8"?>', '<sentence id="3" document_id="" subdoc="" span="">
<word id="1" form="Sequemur" lemma="sequor" postag="v1pfid---" relation="PRED_CO" head="16"/>
<word id="2" form="igitur" lemma="igitur" postag="d-------_" relation="AuxY" head="16"/>
<word id="3" form="hoc" lemma="hic" postag="a-s---nb_" relation="ATR" head="5"/>
<word id="4" form="quidem" lemma="quidem" postag="d--------" relation="AuxZ" head="6"/>
<word id="5" form="tempore" lemma="tempus" postag="n-s---nb-" relation="ADV_CO" head="6"/>
<word id="6" form="et" lemma="et" postag="c--------" relation="COORD" head="1"/>
<word id="7" form="hac" lemma="hic" postag="a-s---fb_" relation="ATR" head="9"/>
<word id="8" form="in" lemma="in" postag="r--------" relation="AuxP" head="6"/>
<word id="9" form="quaestione" lemma="quaestio" postag="n-s---fb-" relation="ADV_CO" head="8"/>
<word id="10" form="potissimum" lemma="potis" postag="a-s---nas" relation="ADV" head="1"/>
<word id="11" form="Stoicos" lemma="Stoicus" postag="n-p---ma-" relation="OBJ" head="1"/>
<word id="12" form="non" lemma="non" postag="d--------" relation="AuxZ" head="13"/>
<word id="13" form="ut" lemma="ut" postag="c--------" relation="AuxC" head="1"/>
<word id="14" form="interpretes" lemma="interpres" postag="n-p---mn-" relation="SBJ" head="37"/>
<word id="15" form="," lemma="punc1" postag="u--------" relation="AuxX" head="0"/>
<word id="16" form="sed" lemma="sed" postag="c--------" relation="COORD" head="0"/>
<word id="17" form="," lemma="punc1" postag="u--------" relation="AuxX" head="0"/>
<word id="18" form="ut" lemma="ut" postag="c--------" relation="AuxC" head="35"/>
<word id="19" form="solemus" lemma="soleo" postag="v1ppia---" relation="ADV" head="18"/>
<word id="20" form="," lemma="punc1" postag="u--------" relation="AuxX" head="0"/>
<word id="21" form="e" lemma="ex" postag="r--------" relation="AuxP" head="35"/>
<word id="22" form="fontibus" lemma="fons" postag="n-p---fb-" relation="OBJ" head="21"/>
<word id="23" form="eorum" lemma="is" postag="p-p---mg-" relation="ATR" head="22"/>
<word id="24" form="iudicio" lemma="judicium" postag="n-s---nb-" relation="ADV_CO" head="26"/>
<word id="25" form="arbitrio" lemma="arbitrium" postag="n-s---nb-" relation="ADV_CO" head="26"/>
<word id="26" form="-que" lemma="-que" postag="c--------" relation="COORD" head="35"/>
<word id="27" form="nostro" lemma="noster" postag="a-s---nb-" relation="ATR" head="26"/>
<word id="28" form="," lemma="punc1" postag="u--------" relation="AuxX" head="0"/>
<word id="29" form="quantum" lemma="quantus" postag="a-s---na-" relation="ADV_CO" head="31"/>
<word id="30" form="quo" lemma="qui" postag="a-s---mb_" relation="ATR" head="32"/>
<word id="31" form="-que" lemma="-que" postag="c--------" relation="COORD" head="33"/>
<word id="32" form="modo" lemma="modus" postag="n-s---mb-" relation="ADV_CO" head="31"/>
<word id="33" form="videbitur" lemma="video" postag="v3sfip---" relation="ADV" head="35"/>
<word id="34" form="," lemma="punc1" postag="u--------" relation="AuxX" head="0"/>
<word id="35" form="hauriemus" lemma="haurio" postag="v1pfia---" relation="PRED_CO" head="16"/>
<word id="36" form="." lemma="punc1" postag="u--------" relation="AuxK" head="0"/>
<word id="37" insertion_id="0036e" artificial="elliptic" relation="ADV" lemma="facio" postag="v3ppia---" form="faciunt" head="13"/>
</sentence>' )
a
doc <- xmlTreeParse(a)
top <- xmlRoot(doc)
b <- xmlSApply(top, function(x) xmlGetAttr(x, "id"))
c <- xmlSApply(top, function(x) xmlGetAttr(x, "head"))
b <- as.numeric(b)
c <- as.numeric(c)
edge.matrix <- matrix(b, ncol=1)
edge.matrix <- cbind(edge.matrix, c)
index <- which(edge.matrix[, 2] > 0)
short.edge.matrix <- edge.matrix[index, ]
arcplot(short.edge.matrix, las = 1, sorted = TRUE, lwd.arcs = 7 )
graph.object <- graph_from_edgelist(short.edge.matrix)
plot.igraph(graph.object)
length(E(graph.object))
vertex_count <- length(E(graph.object)) + 1
degree_sum <-  sum(degree(graph.object)^2)
degree_sum / vertex_count
k2 <- fractions(degree_sum / vertex_count)
x <- E(graph.object) - k2
(vertex_count/2) * x[length(x)]
(vertex_count/2)  * (length(E(graph.object)) - (degree_sum / vertex_count))
9400/390
42560-700
41860-35000
41860-36000
41860*.055
425 * .02
choose(4,2)
choose(7,2)
choose(6,2)
10^-1
require(tidyverse)
setwd("~/SyntaxMetrics/R_files/code/combinations")
require(XML)
require(tidyverse)
require(stringr)
input.dir <- "./combin_input"
files.v <- dir(path=input.dir, pattern=".*xml")
i <- 1
files.v[i]
doc.object <- xmlTreeParse(file.path(input.dir, files.v[i]), useInternalNodes=TRUE)
word.nodes <- getNodeSet(doc.object, "//word")
word.list <- xmlApply(word.nodes, xmlToList)
y <- map(word.list, names) %>%
unlist() %>%
unique()
y <- y[-which(y == "insertion_id" | y == "artificial") ] # remove attributes associated only with ellipses.
y
for (i in seq_along(y)) {
if ( i == 1) {
z <- word.list %>% map_chr(y[i]) %>%
data.frame(check.names = FALSE, stringsAsFactors = FALSE)
} else {
z <- word.list %>% map_chr(y[i]) %>%
cbind(z,  ., stringsAsFactors = FALSE)
}
}
colnames(z) <- y # name the columns according with the attribute names
View(z)
group_list <- list()
group1.v <- c(17, 16, 18, 28, 27, 31, 41, 40, 44, 54, 53, 55)
group_ist[[1]] <- group1.v
group_list[[1]] <- group1.v
group2.v <- c(17, 16, 18:39, 13:15)
group_list[[2]] <- group2.v
group2.v <- c(17, 16, 18:39, 13:15, 9:10) # indices of morphology values, etc.  for first 2 generations (target word and parent)
groupd3.v <- c(28, 27, 29:39, 41, 40, 42:52)
choose(26, 1:26) %>%
sum()
choose(55, 1:55) %>%
sum()
choose(12, 1:12) %>%
sum()
choose(29, 1:10)
group_list[[3]] <- groupd3.v
choose(29, 1:15)
paste("24", "Choose",  i, collapse = " ")
paste("24", "Choose",  1:5, collapse = " ")
group1.list <- list()
group_1.list <- list()
y[group1.v]
group_1.list <- map(y[group1.v], combn)
group_1.list <- map(y[group1.v], combn, 1)
group_1.list <- map(y[group1.v], combn, 1:12)
group_1.list <- list()
seq_along(group1.v)
nomina.v <- NULL
for (i in seq_along(group1.v)) {
group_1.list[[i]] <- combn(y[group1.v, i])
nomina.v <- paste(length(group1.v), "Choose",  i, collapse = " ") %>%
append(nomina.v, .)
}
i <- 1
for (i in seq_along(group1.v)) {
group_1.list[[i]] <- combn(y[group1.v, i])
nomina.v <- paste(length(group1.v), "Choose",  i, collapse = " ") %>%
append(nomina.v, .)
}
combn(y[group1.v, i])
for (i in seq_along(group1.v)) {
group_1.list[[i]] <- combn(y[group1.v], i)
nomina.v <- paste(length(group1.v), "Choose",  i, collapse = " ") %>%
append(nomina.v, .)
}
names(group_1.list) <- nomina.v
group_2.list <- list() # make empty list object to store result of loop
nomina.v <- NULL # make empty vector to store names
for (i in 1:5) { # iterate selected number or times
group_2.list[[i]] <- combn(y[group2.v], i) # make all possible combinations of variables
nomina.v <- paste(length(group2.v), "Choose",  i, collapse = " ") %>% # create names for elements in list
append(nomina.v, .)
}
names(group_2.list) <- nomina.v  # assign names to list elements
group_3.list <- list() # make empty list object to store result of loop
nomina.v <- NULL # make empty vector to store names
for (i in 1:5) { # iterate selected number or times
group_3.list[[i]] <- combn(y[group3.v], i) # make all possible combinations of variables
nomina.v <- paste(length(group3.v), "Choose",  i, collapse = " ") %>% # create names for elements in list
append(nomina.v, .)
}
group3.v <- c(28, 27, 29:39, 41, 40, 42:52) # indices for parent and grandparent values.
group_3.list <- list() # make empty list object to store result of loop
nomina.v <- NULL # make empty vector to store names
for (i in 1:5) { # iterate selected number or times
group_3.list[[i]] <- combn(y[group3.v], i) # make all possible combinations of variables
nomina.v <- paste(length(group3.v), "Choose",  i, collapse = " ") %>% # create names for elements in list
append(nomina.v, .)
}
ex_combn <- function(attributes, selection) {
for (i in 1:5) {
combn(attributes[selection], i)
}
}
test.l <- list()
ex_combn <- function(attributes, selection) {
output <- list()
for (i in 1:5) {
combn(attributes[selection], i)
}
}
ex_combn(y, group1.v)
x <- ex_combn(y, group1.v)
ex_combn <- function(attributes, selection) {
output <- list()
for (i in 1:5) {
output[[i]]  <- combn(attributes[selection], i)
}
}
x <- ex_combn(y, group1.v)
lapply(y[group1.v], combn 2)
lapply(y[group1.v], combn )
lapply(y[group1.v], combn, 2 )
y[group1.v]
lapply(y[group1.v], combn, 1 )
lapply(y[group1.v], combn, 2 )
lapply(1:3, combn,  )
lapply(1:3, combn,  y[group1.v])
choose(55, 1:12) %>%
sum()
choose(55, 1:5) %>%
sum()
choose(26, 1:5) %>%
sum()
choose(12, 1:12) %>%
sum()
choose(29, 1:29) %>%
sum()
choose(26, 1:26) %>%
sum()
